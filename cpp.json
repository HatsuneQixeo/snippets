{
	// Place your snippets for cpp here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"Exception Class": {
		"prefix": "exclass",
		"body": [
			"class $0Exception: public std::exception",
			"{",
			"\tpublic:\tconst char\t*what(void) const _NOEXCEPT;",
			"};",
			"const char\t*${TM_FILENAME_BASE}::$0Exception::what(void) const _NOEXCEPT",
			"{",
			"\treturn (\"${TM_FILENAME_BASE}: $0\");",
			"}",
			""
		],
		"description": "Execption Class snippet"
	},
	"Try Catch": {
		"prefix": "trycatch",
		"body": [
			"try",
			"{",
			"\t$0",
			"}",
			"catch (const std::exception &e)",
			"{",
			"\tstd::cerr << e.what() << std::endl;",
			"}",
		],
		"description": "Try catch snippet"
	},
	"Class Member": {
		"prefix": "classmem",
		"body": [
			"${1:void}\t${TM_FILENAME_BASE}::${2:function_name}(${3:void})",
			"{",
			"\t$0",
			"}",
			""
		],
		"description": "Class Member snippet"
	},
	"Class Logging": {
		"prefix": "classlog",
		"body": [
			"std::ostream\t&operator<<(std::ostream &stream, const ${TM_FILENAME_BASE} &${1:${TM_FILENAME_BASE/(.*)/${1:/downcase}/}});",
			"std::ostream\t&operator<<(std::ostream &stream, const ${TM_FILENAME_BASE} &${1:${TM_FILENAME_BASE/(.*)/${1:/downcase}/}})",
			"{",
			"\tstream << ${1:${TM_FILENAME_BASE/(.*)/${1:/downcase}/}}.$0;",
			"\treturn (stream);",
			"}",
			""
		],
		"description": "Class Logging snippet"
	},
	"Esc Clean": {
		"prefix": "escclean",
		"body": [
			"std::cout << \"\\033[2J\";"
		],
		"description": "Class Logging snippet"
	},
	"system_error": {
		"prefix": "syserr",
		"body": [
			"std::system_error(errno, std::system_category(), $0)"
		],
		"description": "system_error snippet"
	},
	"ansi": {
		"prefix": "ansilist",
		"body": [
			"namespace ansi",
			"{",
			"\ttypedef const char	*color_t;",
			"",
			"\tnamespace dark",
			"\t{",
			"\t\tconst color_t\tgrey = \"\\e[30m\";",
			"\t\tconst color_t\tred = \"\\e[31m\";",
			"\t\tconst color_t\tgreen = \"\\e[32m\";",
			"\t\tconst color_t\tyellow = \"\\e[33m\";",
			"\t\tconst color_t\tblue = \"\\e[34m\";",
			"\t\tconst color_t\tmagenta = \"\\e[35m\";",
			"\t\tconst color_t\tcyan = \"\\e[36m\";",
			"\t\tconst color_t\twhite = \"\\e[37m\";",
			"\t}",
			"",
			"\tnamespace bright",
			"\t{",
			"\t\tconst color_t\tgrey = \"\\e[90m\";",
			"\t\tconst color_t\tred = \"\\e[91m\";",
			"\t\tconst color_t\tgreen = \"\\e[92m\";",
			"\t\tconst color_t\tyellow = \"\\e[93m\";",
			"\t\tconst color_t\tblue = \"\\e[94m\";",
			"\t\tconst color_t\tmagenta = \"\\e[95m\";",
			"\t\tconst color_t\tcyan = \"\\e[96m\";",
			"\t\tconst color_t\twhite = \"\\e[97m\";",
			"\t}",
			"",
			"\tconst color_t\treset = \"\\e[0m\";",
			"\tconst color_t\tgrey = dark::grey;",
			"\tconst color_t\tred = dark::red;",
			"\tconst color_t\tgreen = dark::green;",
			"\tconst color_t\tyellow = dark::yellow;",
			"\tconst color_t\tblue = dark::blue;",
			"\tconst color_t\tmagenta = dark::magenta;",
			"\tconst color_t\tcyan = dark::cyan;",
			"\tconst color_t\twhite = dark::white;",
			"",
			"\tconst color_t\tbold = \"\\e[1m\";",
			"\tconst color_t\titalic = \"\\e[3m\";",
			"\tconst color_t\tunderline = \"\\e[4m\";",
			"\tconst color_t\tblink = \"\\e[5m\";",
			"\tconst color_t\tinvert = \"\\e[7m\";",
			"\tconst color_t\thidden = \"\\e[8m\";",
			"",
			"\tconst color_t\tno_bold = \"\\e[21m\";",
			"\tconst color_t\tno_italic = \"\\e[23m\";",
			"\tconst color_t\tno_underline = \"\\e[24m\";",
			"\tconst color_t\tno_blink = \"\\e[25m\";",
			"\tconst color_t\tno_invert = \"\\e[27m\";",
			"\tconst color_t\tno_hidden = \"\\e[28m\";",
			"",
			"\tconst color_t\tclear_line = \"\\e[K\";",
			"\tconst color_t\tclear_screen = \"\\e[2J\";",
			"",
			"\tconst color_t\tcursor_up = \"\\e[A\";",
			"\tconst color_t\tcursor_down = \"\\e[B\";",
			"\tconst color_t\tcursor_forward = \"\\e[C\";",
			"\tconst color_t\tcursor_back = \"\\e[D\";",
			"\tconst color_t\tcursor_next_line = \"\\e[E\";",
			"\tconst color_t\tcursor_prev_line = \"\\e[F\";",
			"\tconst color_t\tcursor_position = \"\\e[H\";",
			"\tconst color_t\tcursor_save = \"\\e[s\";",
			"\tconst color_t\tcursor_restore = \"\\e[u\";",
			"\tconst color_t\tcursor_hide = \"\\e[?25l\";",
			"\tconst color_t\tcursor_show = \"\\e[?25h\";",
			"",
			"\tconst color_t\tscroll_up = \"\\e[S\";",
			"\tconst color_t\tscroll_down = \"\\e[T\";",
			"\tconst color_t\tscroll_left = \"\\e[@\";",
			"\tconst color_t\tscroll_right = \"\\e[P\";",
			"\tconst color_t\tscroll_next_line = \"\\e[E\";",
			"\tconst color_t\tscroll_prev_line = \"\\e[F\";",
			"\tconst color_t\tscroll_position = \"\\e[H\";",
			"\tconst color_t\tscroll_save = \"\\e[s\";",
			"\tconst color_t\tscroll_restore = \"\\e[u\";",
			"\tconst color_t\tscroll_hide = \"\\e[?25l\";",
			"\tconst color_t\tscroll_show = \"\\e[?25h\";",
			"",
			"\tconst color_t\terase_line = \"\\e[K\";",
			"\tconst color_t\terase_screen = \"\\e[2J\";",
			"\tconst color_t\terase_up = \"\\e[1J\";",
			"\tconst color_t\terase_down = \"\\e[J\";",
			"\tconst color_t\terase_start = \"\\e[1K\";",
			"\tconst color_t\terase_end = \"\\e[K\";",
			"",
			"\tconst color_t\tnone = \"\";",
			"};",
			"",
		]
	},
	"for iterator": {
		"prefix": "forit",
		"body": [
			"for (${1:std::vector<int>}::${2:iterator} ${4:it} = ${3:vec}.begin(), ${5:end} = ${3:vec}.end(); ${4:it} != ${5:end}; ++${4:it})",
			"{",
			"\t$0",
			"}",
			""
		]
	},
}